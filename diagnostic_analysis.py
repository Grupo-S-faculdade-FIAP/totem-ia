#!/usr/bin/env python3
"""
DIAGN√ìSTICO COMPLETO - Por que a classifica√ß√£o est√° errada?
"""

from evaluate_eligibility_fast import EnhancedFastClassifier
from corrected_classifier import CorrectedCapClassifier
import numpy as np
import cv2
from pathlib import Path

def diagnostic_analysis():
    print("üîç DIAGN√ìSTICO COMPLETO DO PROBLEMA DE CLASSIFICA√á√ÉO")
    print("=" * 70)

    # 1. Verificar dados de treinamento originais
    print("\n1Ô∏è‚É£  DADOS DE TREINAMENTO ORIGINAIS:")
    print("-" * 40)

    classifier_original = EnhancedFastClassifier()
    if not classifier_original.load_model():
        print("‚ùå Modelo original n√£o encontrado")
        return

    # Verificar imagens de treinamento
    train_dir = Path("datasets/color-cap/train/images")
    if train_dir.exists():
        train_files = list(train_dir.glob("*.jpg"))[:10]  # Primeiras 10
        print(f"üìÇ Dataset color-cap tem {len(list(train_dir.glob('*.jpg')))} imagens")
        print("üîç Verificando se s√£o realmente tampinhas:")

        tampinhas_reais = 0
        nao_tampinhas = 0

        for img_path in train_files:
            is_cap, confidence = classifier_original.predict_single(str(img_path))
            if is_cap:
                tampinhas_reais += 1
            else:
                nao_tampinhas += 1

        print(f"   ‚úÖ Classificadas como tampinhas: {tampinhas_reais}")
        print(f"   ‚ùå Classificadas como n√£o-tampinhas: {nao_tampinhas}")

    # 2. Verificar imagens reais de tampinhas
    print("\n2Ô∏è‚É£  IMAGENS REAIS DE TAMPINHAS:")
    print("-" * 40)

    tampinhas_dir = Path("datasets/tampinhas")
    if tampinhas_dir.exists():
        tampinhas_files = list(tampinhas_dir.glob("*.jpg"))
        print(f"üìÇ Pasta tampinhas tem {len(tampinhas_files)} imagens reais")

        for img_path in tampinhas_files:
            is_cap, confidence = classifier_original.predict_single(str(img_path))
            result = '‚úÖ TAMPINHA' if is_cap else '‚ùå N√ÉO √â TAMPINHA'
            print("30")

    # 3. Comparar com expectativas do usu√°rio
    print("\n3Ô∏è‚É£  COMPARA√á√ÉO COM EXPECTATIVAS DO USU√ÅRIO:")
    print("-" * 40)

    print("USU√ÅRIO DISSE:")
    print("  - imagem1.jpg a imagem5.jpg: N√ÉO S√ÉO tampinhas")
    print("  - imagem6.jpg: √â UMA tampinha")
    print()

    print("MODELO ORIGINAL CLASSIFICOU:")
    test_images = ['images/imagem1.jpg', 'images/imagem2.jpg', 'images/imagem3.jpg',
                   'images/imagem4.jpg', 'images/imagem5.jpg', 'images/imagem6.jpg']

    for img_path in test_images:
        if Path(img_path).exists():
            is_cap, confidence = classifier_original.predict_single(img_path)
            result = '‚úÖ TAMPINHA' if is_cap else '‚ùå N√ÉO √â TAMPINHA'
            print("30")

    # 4. An√°lise do problema
    print("\n4Ô∏è‚É£  AN√ÅLISE DO PROBLEMA:")
    print("-" * 40)

    print("üîç O QUE ACONTECEU:")
    print("   1. O modelo foi treinado assumindo que TODAS as imagens dos datasets s√£o tampinhas")
    print("   2. Isso inclui imagens que podem n√£o ser tampinhas reais")
    print("   3. Amostras negativas foram criadas sinteticamente, mas podem n√£o ser realistas")
    print("   4. O modelo aprendeu padr√µes errados dos dados de treinamento")

    print("\nüí° SOLU√á√ÉO NECESS√ÅRIA:")
    print("   1. Usar apenas imagens verificadamente reais de tampinhas para treinamento positivo")
    print("   2. Usar imagens verificadamente reais de N√ÉO-tampinhas para treinamento negativo")
    print("   3. Ou coletar mais dados de treinamento adequados")

    print("\nüéØ CONCLUS√ÉO:")
    print("   O modelo N√ÉO est√° errado - ele foi treinado com dados inadequados!")
    print("   A classifica√ß√£o atual reflete os dados de treinamento, n√£o a realidade.")

if __name__ == "__main__":
    diagnostic_analysis()